/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Juan David
 */
public class PanelAdvanceMode extends javax.swing.JPanel{

    private JFrame frame;
    
    private LinealProgrammingInterface ui;
    private final JFrame last;
    
    /**
     * Creates new form PanelAdvaceMode
     */
    public PanelAdvanceMode(LinealProgrammingInterface ui,String stringNumberOfVariables, String stringNumberOfConstrains, String criterion, JFrame screen, JFrame last) {
        initComponents();
        labCriterion.setText(criterion);
        frame = screen;
        this.last = last;
        int numberOfVariables = Integer.parseInt(stringNumberOfVariables);
        int numberOfConstrains = Integer.parseInt(stringNumberOfConstrains);
        numberOfVariables += 3;
        numberOfConstrains += 1;
        String[] titles = new String[numberOfVariables];
        titles[0] = "Variable";
        for (int i = 1; i < titles.length-2; i++) {
            titles [i] = "X"+i;
        }
        titles[titles.length-2] = "Direction";
        titles[titles.length-1] = "RHS"; 
        
        String[][] data = new String[numberOfConstrains][numberOfVariables];
     
        for (int i = 0; i < numberOfConstrains; i++) {
            for (int j = 0; j < numberOfVariables; j++) {
               
                if(j == 0){
                    if(i == 0){
                       data[i][j] = "Z";
                    }else{
                        data[i][j] = "C"+i;
                    }
                }
            }
        }
        
        tabAdvanced = new JTable(data, titles);
        this.ui = ui;
        scrollPane.setViewportView(tabAdvanced);
        add(scrollPane);
    }
    public JTable getTable(){
        return tabAdvanced;
    }
    
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabAdvanced = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        butSolve = new javax.swing.JButton();
        labCriterion = new javax.swing.JLabel();
        butBack = new javax.swing.JButton();

        tabAdvanced.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabAdvanced);

        scrollPane.setViewportView(jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        butSolve.setText("Solve");
        butSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSolveActionPerformed(evt);
            }
        });
        jPanel1.add(butSolve, java.awt.BorderLayout.PAGE_START);

        labCriterion.setText("Max/Min");
        jPanel1.add(labCriterion, java.awt.BorderLayout.LINE_START);

        butBack.setText("Back");
        butBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBackActionPerformed(evt);
            }
        });
        jPanel1.add(butBack, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void butSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSolveActionPerformed
//        tabAdvanced.
        String[] equations = getInformation();
        double[][] finalMatr = ui.FinalSolution(equations, labCriterion.getText());
        JFrame ventana = new JFrame();
        PanelSolution panelS = new PanelSolution(ui, equations, tabAdvanced.getColumnCount()-3, true, ventana, frame);
        panelS.fillMatrix(finalMatr);
        ventana.setVisible(true);
        ventana.setTitle(frame.getTitle());
        frame.setVisible(false);
        ventana.add(panelS);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ventana.pack();
    }//GEN-LAST:event_butSolveActionPerformed

    private void butBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBackActionPerformed
        last.setVisible(true);
        frame.dispose();
    }//GEN-LAST:event_butBackActionPerformed

    public String[] getInformation(){
        String[] information = new String[tabAdvanced.getRowCount()];
        for (int i = 0; i < tabAdvanced.getRowCount(); i++){
           
            String line = "";
            for (int j = 0; j < tabAdvanced.getColumnCount(); j++) {
                 if(tabAdvanced.getModel().getValueAt(i, j) == null){
                  if(j == tabAdvanced.getColumnCount() - 1){
                      line+="0";
                  }else{
                    line+="0 "+"X"+j+" "; 
                  }
                }else{
                       if(j == 0){
                          if(tabAdvanced.getModel().getValueAt(i, j).equals("Z")){
                            line += "1 "+"Z "; 
                       }else{
                            line += "0 "+"Z "; 
                          }
                       
                      }else{
                           if(j < tabAdvanced.getColumnCount()-2){
                              line+=tabAdvanced.getModel().getValueAt(i, j)+ " "+"X"+j+" "; 
                           }else{
                                line+=tabAdvanced.getModel().getValueAt(i, j)+" ";
                           }
                           
                       }
                }
      
            }
         information[i] = line;
        }
        System.out.println(tabAdvanced.getRowCount());
        for (int i = 0; i < information.length; i++) {
            System.out.println(information[i]);
        }
        return information;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBack;
    private javax.swing.JButton butSolve;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labCriterion;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tabAdvanced;
    // End of variables declaration//GEN-END:variables
}
